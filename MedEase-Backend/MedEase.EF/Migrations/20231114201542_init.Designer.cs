// <auto-generated />
using System;
using MedEase.EF.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedEase.EF.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231114201542_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedEase.Core.Models.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("MedEase.Core.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Building")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("JoinDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", "security");
                });

            modelBuilder.Entity("MedEase.Core.Models.Appointment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DoctorConfirmation")
                        .HasColumnType("bit");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<bool>("PatientConfirmation")
                        .HasColumnType("bit");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("MedEase.Core.Models.AppointmentInsurance", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<int>("InsuranceID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AppointmentID")
                        .IsUnique();

                    b.HasIndex("InsuranceID");

                    b.ToTable("AppointmentInsurance");
                });

            modelBuilder.Entity("MedEase.Core.Models.Certificates", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DoctorID");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("MedEase.Core.Models.Diagnosis", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExaminationID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ExaminationID")
                        .IsUnique();

                    b.ToTable("Diagnosis");
                });

            modelBuilder.Entity("MedEase.Core.Models.Doctor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("AllowVisa")
                        .HasColumnType("bit");

                    b.Property<string>("AppUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Faculty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Fees")
                        .HasColumnType("real");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("LicenseImg")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("SpecialityID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AppUserID")
                        .IsUnique();

                    b.HasIndex("SpecialityID");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("MedEase.Core.Models.DoctorInsurance", b =>
                {
                    b.Property<int>("InsuranceID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("DoctorID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("InsuranceID", "DoctorID");

                    b.HasIndex("DoctorID");

                    b.ToTable("DoctorInsurance");
                });

            modelBuilder.Entity("MedEase.Core.Models.DoctorSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsWorking")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("TimeInterval")
                        .HasColumnType("int");

                    b.Property<DateTime>("WeekDay")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorSchedule");
                });

            modelBuilder.Entity("MedEase.Core.Models.DoctorSubspeciality", b =>
                {
                    b.Property<int>("SubSpecialityID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("DocID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.HasKey("SubSpecialityID", "DocID");

                    b.HasIndex("DocID");

                    b.ToTable("DoctorSubspeciality");
                });

            modelBuilder.Entity("MedEase.Core.Models.Drug", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.ToTable("Drug");
                });

            modelBuilder.Entity("MedEase.Core.Models.Examination", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AppointmentID")
                        .IsUnique();

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("Examination");
                });

            modelBuilder.Entity("MedEase.Core.Models.Insurance", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Insurance");
                });

            modelBuilder.Entity("MedEase.Core.Models.Investigation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasImage")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Investigation");
                });

            modelBuilder.Entity("MedEase.Core.Models.InvestigationImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvestigationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvestigationId")
                        .IsUnique();

                    b.ToTable("InvestigationImage");
                });

            modelBuilder.Entity("MedEase.Core.Models.Patient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AppUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("AppUserID")
                        .IsUnique();

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("MedEase.Core.Models.PatientInsurance", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("InsuranceID")
                        .HasColumnType("int");

                    b.Property<int>("InsuranceNumber")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("InsuranceID");

                    b.HasIndex("PatientID")
                        .IsUnique();

                    b.ToTable("PatientInsurance");
                });

            modelBuilder.Entity("MedEase.Core.Models.PatientMedicalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("HadSurgery")
                        .HasColumnType("bit");

                    b.Property<bool>("HasAllergies")
                        .HasColumnType("bit");

                    b.Property<bool>("HasChronicIllnesses")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHospitalized")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSmoking")
                        .HasColumnType("bit");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<bool>("TakeMedications")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PatientID")
                        .IsUnique();

                    b.ToTable("PatientMedicalHistory");
                });

            modelBuilder.Entity("MedEase.Core.Models.PrescriptionDrug", b =>
                {
                    b.Property<int>("DrugID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("ExaminationID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("DrugID", "ExaminationID");

                    b.HasIndex("ExaminationID");

                    b.ToTable("PrescriptionDrug");
                });

            modelBuilder.Entity("MedEase.Core.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAnswered")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("MedEase.Core.Models.Review", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ClinicRate")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorRate")
                        .HasColumnType("int");

                    b.Property<int>("ExaminationID")
                        .HasColumnType("int");

                    b.Property<int>("WaitingTimeinMins")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ExaminationID")
                        .IsUnique();

                    b.ToTable("Review");
                });

            modelBuilder.Entity("MedEase.Core.Models.Speciality", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Speciality");
                });

            modelBuilder.Entity("MedEase.Core.Models.SubSpeciality", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("specialityID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("specialityID");

                    b.ToTable("SubSpeciality");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "security");

                    b.HasData(
                        new
                        {
                            Id = "R1",
                            ConcurrencyStamp = "cf0b8e1a-1969-43f4-9132-90ef7a93372f",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "R2",
                            ConcurrencyStamp = "81d084de-a7ea-4b5b-b4f0-f11854938da2",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "security");
                });

            modelBuilder.Entity("MedEase.Core.Models.AppUser", b =>
                {
                    b.HasOne("MedEase.Core.Models.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("MedEase.Core.Models.Appointment", b =>
                {
                    b.HasOne("MedEase.Core.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedEase.Core.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedEase.Core.Models.AppointmentInsurance", b =>
                {
                    b.HasOne("MedEase.Core.Models.Appointment", "Appointment")
                        .WithOne("Insurance")
                        .HasForeignKey("MedEase.Core.Models.AppointmentInsurance", "AppointmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedEase.Core.Models.Insurance", "Insurance")
                        .WithMany("Appointments")
                        .HasForeignKey("InsuranceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("MedEase.Core.Models.Certificates", b =>
                {
                    b.HasOne("MedEase.Core.Models.Doctor", "Doctor")
                        .WithMany("Certificates")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MedEase.Core.Models.Diagnosis", b =>
                {
                    b.HasOne("MedEase.Core.Models.Examination", "Examination")
                        .WithOne("Diagnosis")
                        .HasForeignKey("MedEase.Core.Models.Diagnosis", "ExaminationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Examination");
                });

            modelBuilder.Entity("MedEase.Core.Models.Doctor", b =>
                {
                    b.HasOne("MedEase.Core.Models.AppUser", "AppUser")
                        .WithOne("Doctor")
                        .HasForeignKey("MedEase.Core.Models.Doctor", "AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedEase.Core.Models.Speciality", "Speciality")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("MedEase.Core.Models.DoctorInsurance", b =>
                {
                    b.HasOne("MedEase.Core.Models.Doctor", "Doctor")
                        .WithMany("Insurances")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedEase.Core.Models.Insurance", "Insurance")
                        .WithMany("Doctors")
                        .HasForeignKey("InsuranceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("MedEase.Core.Models.DoctorSchedule", b =>
                {
                    b.HasOne("MedEase.Core.Models.Doctor", "Doctor")
                        .WithMany("Schedule")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MedEase.Core.Models.DoctorSubspeciality", b =>
                {
                    b.HasOne("MedEase.Core.Models.Doctor", "Doctor")
                        .WithMany("SubSpecialities")
                        .HasForeignKey("DocID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedEase.Core.Models.SubSpeciality", "SubSpeciality")
                        .WithMany("Doctors")
                        .HasForeignKey("SubSpecialityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("SubSpeciality");
                });

            modelBuilder.Entity("MedEase.Core.Models.Examination", b =>
                {
                    b.HasOne("MedEase.Core.Models.Appointment", "Appointment")
                        .WithOne("Examination")
                        .HasForeignKey("MedEase.Core.Models.Examination", "AppointmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedEase.Core.Models.Doctor", "Doctor")
                        .WithMany("Examinations")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedEase.Core.Models.Patient", "Patient")
                        .WithMany("Examinations")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedEase.Core.Models.Investigation", b =>
                {
                    b.HasOne("MedEase.Core.Models.Appointment", "Appointment")
                        .WithOne("Investigation")
                        .HasForeignKey("MedEase.Core.Models.Investigation", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("MedEase.Core.Models.InvestigationImage", b =>
                {
                    b.HasOne("MedEase.Core.Models.Investigation", "Investigation")
                        .WithOne("InvestigationImage")
                        .HasForeignKey("MedEase.Core.Models.InvestigationImage", "InvestigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Investigation");
                });

            modelBuilder.Entity("MedEase.Core.Models.Patient", b =>
                {
                    b.HasOne("MedEase.Core.Models.AppUser", "AppUser")
                        .WithOne("Patient")
                        .HasForeignKey("MedEase.Core.Models.Patient", "AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("MedEase.Core.Models.PatientInsurance", b =>
                {
                    b.HasOne("MedEase.Core.Models.Insurance", "Insurance")
                        .WithMany("Patients")
                        .HasForeignKey("InsuranceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedEase.Core.Models.Patient", "Patient")
                        .WithOne("Insurance")
                        .HasForeignKey("MedEase.Core.Models.PatientInsurance", "PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insurance");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedEase.Core.Models.PatientMedicalHistory", b =>
                {
                    b.HasOne("MedEase.Core.Models.Patient", "Patient")
                        .WithOne("History")
                        .HasForeignKey("MedEase.Core.Models.PatientMedicalHistory", "PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedEase.Core.Models.PrescriptionDrug", b =>
                {
                    b.HasOne("MedEase.Core.Models.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedEase.Core.Models.Examination", "Examination")
                        .WithMany("PrescribedDrugs")
                        .HasForeignKey("ExaminationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Examination");
                });

            modelBuilder.Entity("MedEase.Core.Models.Question", b =>
                {
                    b.HasOne("MedEase.Core.Models.Doctor", "Doctor")
                        .WithMany("AnsweredQuestions")
                        .HasForeignKey("DoctorId");

                    b.HasOne("MedEase.Core.Models.Patient", "Patient")
                        .WithMany("AskedQuestions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedEase.Core.Models.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("MedEase.Core.Models.Review", b =>
                {
                    b.HasOne("MedEase.Core.Models.Examination", "Examination")
                        .WithOne("Review")
                        .HasForeignKey("MedEase.Core.Models.Review", "ExaminationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Examination");
                });

            modelBuilder.Entity("MedEase.Core.Models.SubSpeciality", b =>
                {
                    b.HasOne("MedEase.Core.Models.Speciality", "Speciality")
                        .WithMany("SubSpecialities")
                        .HasForeignKey("specialityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MedEase.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MedEase.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedEase.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MedEase.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedEase.Core.Models.Address", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MedEase.Core.Models.AppUser", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedEase.Core.Models.Appointment", b =>
                {
                    b.Navigation("Examination");

                    b.Navigation("Insurance");

                    b.Navigation("Investigation");
                });

            modelBuilder.Entity("MedEase.Core.Models.Doctor", b =>
                {
                    b.Navigation("AnsweredQuestions");

                    b.Navigation("Appointments");

                    b.Navigation("Certificates");

                    b.Navigation("Examinations");

                    b.Navigation("Insurances");

                    b.Navigation("Schedule");

                    b.Navigation("SubSpecialities");
                });

            modelBuilder.Entity("MedEase.Core.Models.Examination", b =>
                {
                    b.Navigation("Diagnosis")
                        .IsRequired();

                    b.Navigation("PrescribedDrugs");

                    b.Navigation("Review")
                        .IsRequired();
                });

            modelBuilder.Entity("MedEase.Core.Models.Insurance", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("MedEase.Core.Models.Investigation", b =>
                {
                    b.Navigation("InvestigationImage");
                });

            modelBuilder.Entity("MedEase.Core.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("AskedQuestions");

                    b.Navigation("Examinations");

                    b.Navigation("History")
                        .IsRequired();

                    b.Navigation("Insurance")
                        .IsRequired();
                });

            modelBuilder.Entity("MedEase.Core.Models.Speciality", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("SubSpecialities");
                });

            modelBuilder.Entity("MedEase.Core.Models.SubSpeciality", b =>
                {
                    b.Navigation("Doctors");
                });
#pragma warning restore 612, 618
        }
    }
}
